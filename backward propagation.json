def backward_propagation(parameters, cache, X, Y):
    """
    Implement the backward propagation using the instructions above.
    
    Arguments:
    parameters -- python dictionary containing our parameters 
    cache -- a dictionary containing "Z1", "A1", "Z2" and "A2".
    X -- input data of shape (2, number of examples)
    Y -- "true" labels vector of shape (1, number of examples)
    
    Returns:
    grads -- python dictionary containing your gradients with respect to different parameters
    """
    m = X.shape[1]
    
    # First, retrieve W1 and W2 from the dictionary "parameters".
    ### START CODE HERE ### (≈ 2 lines of code)
    W1 = parameters["W1"]
    W2 = parameters["W2"]
    ### END CODE HERE ###
        
    # Retrieve also A1 and A2 from dictionary "cache".
    ### START CODE HERE ### (≈ 2 lines of code)
    A1 = cache["A1"]
    A2 = cache["A2"]
    ### END CODE HERE ###
    
    # Backward propagation: calculate dW1, db1, dW2, db2. 
    
    # Here, n_x = 2 
    #       n_h = 4 
    #       n_y = 1
    
    # X = (2,3)  Y = (1,3)  A2 = (1,3)   A1 = (4,3)
    
    #print("X_shape = "+str(X.shape))
    #print("Y_shape = "+str(Y.shape))
    #print("A1_shape = "+str(A1.shape))
    #print("A2_shape = "+str(A2.shape))
    
    ### START CODE HERE ### (≈ 6 lines of code, corresponding to 6 equations on slide above)
    dZ2 = A2 - Y                                        # (1,3) 
    dW2 = (1/m) * np.dot(dZ2,A1.T)                      # (1,4) = (1,3).(3,4)
    db2 = (1/m) * np.sum(dZ2, axis=1, keepdims=True)    # (1,1) = sum(1,3)
    
    dZ1 = np.dot(W2.T,dZ2) * (1 - np.power(A1,2))       # (4,3) = (4,1).(1,3)
    dW1 = (1/m) * np.dot(dZ1,X.T)                       # (4,2) = (4,3).(3,2)
    db1 = (1/m) * np.sum(dZ1, axis=1, keepdims=True)    # (4,1) = sum(4,3)
    ### END CODE HERE ###
    
    #print("dZ2_shape = "+str(dZ2.shape))
    #print("dW2_shape = "+str(dW2.shape))
    #print("db2_shape = "+str(db2.shape))
    #print("dZ1_shape = "+str(dZ1.shape))
    #print("dW1_shape = "+str(dW1.shape))
    #print("db1_shape = "+str(db1.shape))
    
    
    grads = {"dW1": dW1,
             "db1": db1,
             "dW2": dW2,
             "db2": db2}
    
    return grads